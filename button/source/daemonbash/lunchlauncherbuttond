
#!/bin/bash
#
# Script to contact a server when hardware event via serial interface occurs.
# 
# Exits immediately on failure.
#
# This program is free software: you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation, either version 3 of the License, or
#  (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
#  along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# Copyright 2014 Simon Reich
#
## Changelog ####################################################
# 16.04.2014
# Script created

## Setup ########################################################
# 1) Copy script to /usr/bin
# cp ./lunchlauncherbuttond /usr/bin
# 
# 2) Set priviliges
# chmod 755 /usr/bin/lunchlauncherbuttond
# 
# 3) Create log file at /var/log/lunchlauncherbuttond.log
# touch /var/log/lunchlauncherbuttond.log
# chmod 755 /var/log/lunchlauncherbuttond.log
# 
# 4) Configure script as you wish (see setup section below)
#
# 5) Set up systemd service
# cp ./lunchlauncherbuttond.service /etc/systemd/system/
# chmod 755 /etc/systemd/system/lunchlauncherbuttond.service
# systemctl enable lunchlauncherbuttond.service
# systemctl start lunchlauncherbuttond.service

## Global configuration. ########################################
## Cron uses HOME=/, set home to /home/USERNAME
export HOME=/home/sreich
export DISPLAY=:0

## Server Address
REMOTE_HOST="fortknox.physik3.gwdg.de/lunchlauncher"

## Connection protocol: Do you want to use http (port 80) or https (port 443)
## https is only used for encryption here, certification is disabled.
#PROTOCOL="http"
PROTOCOL="https"

## Local terminal
LOCAL_TERMINAL="/dev/ttyUSB0"

## Alarm time
## Only one alarm every minutes possible
ALARM_TIME=60


## No configuration after this. #################################


function OnExit
{
	rm -f ${FILEPIDISRUNNING}
	rm -f ${FILEPIDKEEPALIVECOUNTER}
	rm -Rf ${LOCAL_ROOTPATH}
}


function KeepAlive
{
	# reset counter
	if [[ -r ${FILEPIDKEEPALIVECOUNTER} ]]
	then
		KEEPALIVECOUNTER=`cat ${FILEPIDKEEPALIVECOUNTER}`
	else
		KEEPALIVECOUNTER=0
	fi

	# check if we are still running
	if [[ -r ${FILEPIDISRUNNING} ]]
	then
		ISRUNNING=`cat ${FILEPIDISRUNNING}`
	else
		ISRUNNING=0
	fi

	# thread loop
	while [[ ${ISRUNNING} == 1 ]]
	do
		TIMERCURRENTPRINT=`date`

		# sending get package
		echo "G  " > ${LOCAL_TERMINAL}
		echo "${TIMERCURRENTPRINT} << Get Alive"

		# increase keep alive counter
		if [[ -r ${FILEPIDKEEPALIVECOUNTER} ]]
		then
			KEEPALIVECOUNTER=`cat ${FILEPIDKEEPALIVECOUNTER}`
		fi
		let "KEEPALIVECOUNTER += 1"
		echo ${KEEPALIVECOUNTER} > ${FILEPIDKEEPALIVECOUNTER}

		# send message if button does not respond three times
		if [[ KEEPALIVECOUNTER -gt 3 ]]
		then
			echo "${TIMERCURRENTPRINT} Button is Dead. Exiting now."
			ISRUNNING=0
			echo 0 > ${FILEPIDISRUNNING}
			exit 11
		fi

		# trap if sth happens
		trap "ISRUNNING=0; OnExit" INT TERM EXIT

		# wait 10 minutes
		sleep 10m;

		# check if we are still running
		if [[ -r ${FILEPIDISRUNNING} ]]
		then
			ISRUNNING=`cat ${FILEPIDISRUNNING}`
		else
			ISRUNNING=0
		fi
	done
}


# Setting serial device
stty -F ${LOCAL_TERMINAL} 2400 cs8 cread clocal
if [[ $? != 0 ]]
then
	echo "Setting serial interface ${LOCAL_TERMINAL} failed. Please check permissions."
	echo "Exiting now."
	exit 1
fi

# Server adress
REMOTE_HOST_ADDRESS="${PROTOCOL}://${REMOTE_HOST}/index.php?name=LunchLauncherButton&text=Lunch"

# PID files for keep alive and still running
LOCAL_ROOTPATH=${HOME}/.lunchlauncherbuttond
FILEPIDISRUNNING=${LOCAL_ROOTPATH}/isrunning.pid
FILEPIDKEEPALIVECOUNTER=${LOCAL_ROOTPATH}/buttonalive.pid
if [[ ! -d ${LOCAL_ROOTPATH} ]]; then
    mkdir -p ${LOCAL_ROOTPATH}
	if [[ ! $? == 0 ]]; then
		echo "There was an error creating the foler ${LOCAL_ROOTPATH}."
		echo "This folder is needed for configuration files of the script. Please check if you have set the permissions correctly."
	    echo "Exiting now."
		exit 2
	fi
fi

# write PID files
echo "1" > ${FILEPIDISRUNNING}
echo "0" > ${FILEPIDKEEPALIVECOUNTER}
if [[ ! -r ${FILEPIDISRUNNING} ]]
then
	echo "There was an error reading the file ${FILEPIDISRUNNING}."
    echo "Exiting now."
	exit 3
fi
if [[ ! -r ${FILEPIDKEEPALIVECOUNTER} ]]
then
	echo "There was an error reading the file ${FILEPIDKEEPALIVECOUNTER}."
    echo "Exiting now."
	exit 4
fi
	
# PID Variable for main loop
ISRUNNING=1

# Timer
TIMERCURRENT=`date +%s`;
TIMERRESEND=$((`date +%s` - 3600));	# connect only once every two hours to the internet, people like to press the button multiple times

# Is Service clear to connect to Internet?
# is set to true by default
# is set to false after connecting
# is set to true again after incoming message that button was released, therefore button must be released before being pressed again
CONNECTTOSERVER=1

# Counter for alive package, send every 10 minutes
KEEPALIVECOUNTER=0
KeepAlive &

# Setting trap for anything that could happen
trap "ISRUNNING=0; OnExit" INT TERM EXIT

## Main Loop
while [[ ${ISRUNNING} == 1 ]]
do
	read -n 3 MSGIN < ${LOCAL_TERMINAL}
	if [[ $? != 0 ]]
	then
		echo "Using serial interface ${LOCAL_TERMINAL} failed. Please check permissions."
		echo "Exiting now."
		ISRUNNING=0
		echo 0 > ${FILEPIDISRUNNING}
		exit 5
	fi

	TIMERCURRENT=`date +%s`;
	#TIMERCURRENTPRINT=`date`
	TIMERCURRENTPRINT=''

	# Status arrived
	if [[ ${MSGIN:0:1} == "T"  ]]
	then
		# Button is still alive
		echo 0 > ${FILEPIDKEEPALIVECOUNTER}

		echo "${TIMERCURRENTPRINT} >> Status"

		if [[ ${MSGIN:1:1} == "0"  ]]		# LED is off
		then
			echo "${TIMERCURRENTPRINT}    LED is 0"
		elif [[ ${MSGIN:1:1} == "1"  ]]		# LED is on
		then
			echo "${TIMERCURRENTPRINT}    LED is 1"
		elif [[ ${MSGIN:1:1} == "2"  ]]		# LED is blinking
		then
			echo "${TIMERCURRENTPRINT}    LED is 2"
		fi
		if [[ ${MSGIN:2:1} == "1"  ]]		# Button is on
		then
			echo "${TIMERCURRENTPRINT}    Button is 1"

			# connect to web server
			if [[ ${TIMERCURRENT}-${TIMERRESEND} -gt 3600 ]] && [[ ${CONNECTTOSERVER} == 1 ]]
			then
				echo "${TIMERCURRENTPRINT} -- Connecting to Internet"
				wget --no-check-certificate -qO- ${REMOTE_HOST_ADDRESS} &> /dev/null
				if [[ $? != 0 ]]; then
					echo "${TIMERCURRENTPRINT} Upload of new data to ${REMOTE_HOST_ADDRESS} failed."
					echo "${TIMERCURRENTPRINT} Exiting now."
					exit 1
				fi

				# set variables accordingly
				CONNECTTOSERVER=0
				TIMERRESEND=`date +%s`
			fi

			# send ACK
			echo "ACK" > ${LOCAL_TERMINAL}
			echo "${TIMERCURRENTPRINT} << ACK"
		else
			echo "${TIMERCURRENTPRINT}    Button is 0"

			# send ACK
			echo "ACK" > ${LOCAL_TERMINAL}
			echo "${TIMERCURRENTPRINT} << ACK"

			# Script is allowed to connect to Internet again
			CONNECTTOSERVER=0
		fi
	fi

	# ACK received
	if [[ ${MSGIN} == "ACK"  ]]
	then
		echo "${TIMERCURRENTPRINT} >> ACK"

		# Button is still alive
		echo 0 > ${FILEPIDKEEPALIVECOUNTER}
	fi

	# NCK received
	if [[ ${MSGIN} == "NCK"  ]]
	then
		echo "${TIMERCURRENTPRINT} >> NCK"

		# Button is still alive
		echo 0 > ${FILEPIDKEEPALIVECOUNTER}
	fi

	if [[ -r ${FILEPIDISRUNNING} ]]
	then
		ISRUNNING=`cat ${FILEPIDISRUNNING}`
	else
		ISRUNNING=0
	fi
done

# Killing all threads
OnExit

## Exiting normal
exit 0
